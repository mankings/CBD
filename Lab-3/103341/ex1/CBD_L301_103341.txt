docker commands:
make cassandra container:
    docker pull cassandra:latest
    docker network create cassandra
	docker run --rm -d --name cassandra --hostname cassandra --network cassandra cassandra
load data with cqlsh:
    docker run --rm --network cassandra -v "$(pwd)/data.cql:/scripts/data.cql" -e CQLSH_HOST=cassandra -e CQLSH_PORT=9042 -e CQLVERSION=3.4.5 nuvo/docker-cqlsh
interactive cqlsh:
    docker run --rm -it --network cassandra nuvo/docker-cqlsh cqlsh cassandra 9042 --cqlversion='3.4.5'
close docker container:
    docker kill cassandra
    docker network rm cassandra

keyspace ->  outmost container for data in cassandra
to create a keyspace:
    CREATE KEYSPACE keyspace name
    WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 3};

column family -> container for an ordered collection of rows
the column families may be defined, but the columns themselves are not
attributes of a column family:
* keys_cached
* rows_cached
* preload_row_cache
a row is not forced to have all the columns, unlike relational databases

column -> basic data structure of cassandra with three values, name, value, and timestamp

supercolumn -> special column, stores a map of sub-columns
values: name, map<byte[], column>
important to keep columns that are likely to be queried together together to reduce search timestamp

cql -> cassandra query language
cqlsh -> cassandra query language shell
start cqlsh with *cqlsh* command
some shell commands:
    HELP
    CAPTURE
    CONSISTENCY
    COPY
    DESCRIBE
    EXPAND
    EXIT
    PAGING
    SHOW
    SOURCE
    TRACING
some data definition commands:
    CREATE KEYSPACE
    USE
    ALTER KEYSPACE
    DROP KEYSPACE
    CREATE TABLE
    ALTER TABLE
    DROP TABLE
    TRUNCATE
    CREATE INDEX
    DROP INDEX
some data manipulation commands:
    INSERT
    UPDATE
    DELETE
    BATCH
cql clauses:
    SELECT
    WHERE
    ORDERBY


some of my cqlsh interactions:
    create keyspace "pokedex" with replication = {'class': 'SimpleStrategy', 'replication_factor': 3};
    use pokedex;
    create table pokemon(id int primary key, name text, type1 text, type2 text);
    insert into pokemon (id, name, type1, type2) values (1, 'Bulbasaur', 'grass', 'poison');
    insert into pokemon (id, name, type1, type2) values (4, 'Charmander', 'fire', 'none');
    insert into pokemon (id, name, type1, type2) values (7, 'Squirtle', 'water', 'none');
    select * from pokemon;
         id | name       | type1 | type2
        ----+------------+-------+--------
          1 |  Bulbasaur | grass | poison
          4 | Charmander |  fire |   none
          7 |   Squirtle | water |   none
    select * from pokemon where id=1;
         id | name      | type1 | type2
        ----+-----------+-------+--------
          1 | Bulbasaur | grass | poison
    